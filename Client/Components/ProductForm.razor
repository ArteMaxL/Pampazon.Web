@using Pampazon.Web.Client.Models
@inject HttpClient Http

<EditForm Model="@ProductModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="productCode" class="form-label">Product Code</label>
        <InputText id="productCode" class="form-control" @bind-Value="ProductModel.Code" disabled="IsEdit" />
        <ValidationMessage For="() => ProductModel.Code" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputText id="description" class="form-control" @bind-Value="ProductModel.Description" />
        <ValidationMessage For="() => ProductModel.Description" />
    </div>

    <fieldset class="mb-3">
        <legend>Dimensions (cm)</legend>
        <div class="row">
            <div class="col-md-4 mb-3">
                <label for="height" class="form-label">Height</label>
                <InputNumber TValue="decimal" id="height" class="form-control" @bind-Value="ProductModel.Height" />
                <ValidationMessage For="() => ProductModel.Height" />
            </div>
            <div class="col-md-4 mb-3">
                <label for="width" class="form-label">Width</label>
                <InputNumber TValue="decimal" id="width" class="form-control" @bind-Value="ProductModel.Width" />
                <ValidationMessage For="() => ProductModel.Width" />
            </div>
            <div class="col-md-4 mb-3">
                <label for="depth" class="form-label">Depth</label>
                <InputNumber TValue="decimal" id="depth" class="form-control" @bind-Value="ProductModel.Depth" />
                <ValidationMessage For="() => ProductModel.Depth" />
            </div>
        </div>
    </fieldset>

    <button type="submit" class="btn btn-primary">@(IsEdit ? "Save Changes" : "Create Product")</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public Product ProductModel { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public EventCallback<Product> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(ProductModel);
        }
    }
} 