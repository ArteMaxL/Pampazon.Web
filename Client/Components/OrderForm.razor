@using Pampazon.Web.Client.Models
@using System.ComponentModel.DataAnnotations

<EditForm Model="@OrderModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="clientId" class="form-label">Client ID (CUIT)</label>
        <InputText id="clientId" class="form-control" @bind-Value="OrderModel.ClientId" />
        <ValidationMessage For="() => OrderModel.ClientId" />
    </div>

    <div class="mb-3">
        <label for="recipientName" class="form-label">Recipient Name</label>
        <InputText id="recipientName" class="form-control" @bind-Value="OrderModel.RecipientName" />
        <ValidationMessage For="() => OrderModel.RecipientName" />
    </div>

    <div class="mb-3">
        <label for="recipientAddress" class="form-label">Recipient Address</label>
        <InputText id="recipientAddress" class="form-control" @bind-Value="OrderModel.RecipientAddress" />
        <ValidationMessage For="() => OrderModel.RecipientAddress" />
    </div>
    
    @* TODO: Add UI for managing OrderModel.Items *@

    <button type="submit" class="btn btn-primary">@(IsEdit ? "Save Changes" : "Create Order")</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public Order OrderModel { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public EventCallback<Order> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    protected override void OnInitialized()
    {
        if (!IsEdit)
        {
            OrderModel.Date = DateTime.Now;
            // OrderModel.Status = "Pending"; // Or let backend set
        }
    }

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(OrderModel);
        }
    }
} 