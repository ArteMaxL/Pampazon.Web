@page "/receipts" // Renamed route
@using Pampazon.Web.Client.Models
@using Pampazon.Web.Client.Components
@inject HttpClient Http

<h3>Incoming Receipts</h3>

@if (!string.IsNullOrEmpty(loadErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        Error loading receipts: @loadErrorMessage
    </div>
}

@if (showReceiptForm)
{
    <ReceiptForm ReceiptModel="currentReceipt" IsEdit="isEditMode" OnSubmit="HandleReceiptSubmit" OnCancel="CancelReceiptForm" />
}
else
{
    @if (receipts == null && string.IsNullOrEmpty(loadErrorMessage))
    {
        <p><em>Loading...</em></p>
    }
    else if (receipts != null && !receipts.Any())
    {
        <p><em>No incoming receipts found. You can create a new one.</em></p>
        <button class="btn btn-success mt-3" @onclick="ShowCreateReceiptForm">Create New Receipt</button>
    }
    else if (receipts != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Receipt #</th>
                    <th>Date</th>
                    <th>Client ID</th>
                    <th>Status (Code)</th>
                    <th>Items</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var receiptItem in receipts)
                {
                    <tr>
                        <td>@receiptItem.ReceiptNumber</td>
                        <td>@receiptItem.Date.ToShortDateString()</td>
                        <td>@receiptItem.ClientId</td>
                        <td>@receiptItem.Status</td>
                        <td>@receiptItem.Items?.Count</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ViewReceipt(receiptItem)">View</button>
                            @if (receiptItem.Status == "PendingEntry" || receiptItem.Status == "InProgress") // Comparo string, podría mejorar
                            {
                                <button class="btn btn-sm btn-warning" @onclick="() => ProcessReceipt(receiptItem)">Process</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="ShowCreateReceiptForm">Create New Receipt</button>
    }
}

@code {
    private List<Receipt>? receipts;
    private string? loadErrorMessage;
    
    // Added for form handling
    private bool showReceiptForm = false;
    private Receipt currentReceipt = new();
    private bool isEditMode = false;

    private const string ApiUrl = "api/Receipts";

    // TODO: ProcessReceiptForm component
    // TODO: ViewReceiptDetails component

    protected override async Task OnInitializedAsync()
    {
        await LoadReceipts();
    }

    private async Task LoadReceipts()
    {
        loadErrorMessage = null;
        try
        {
            receipts = await Http.GetFromJsonAsync<List<Receipt>>(ApiUrl);
        }
        catch (HttpRequestException httpEx)
        {
            loadErrorMessage = $"HTTP Error: {httpEx.Message} (Status: {httpEx.StatusCode})";
            receipts = new List<Receipt>();
        }
        catch (Exception ex)
        {
            loadErrorMessage = $"An error occurred: {ex.Message}";
            receipts = new List<Receipt>();
            Console.WriteLine($"Error loading receipts: {ex}");
        }
        StateHasChanged();
    }

    private void ShowCreateReceiptForm()
    {
        currentReceipt = new Receipt 
        {
            Items = new List<ReceiptItem>(),
            Date = DateTime.Now,
            Status = "PendingEntry"
        };
        isEditMode = false;
        showReceiptForm = true;
    }

    private void CancelReceiptForm()
    {
        showReceiptForm = false;
        currentReceipt = new();
    }

    private async Task HandleReceiptSubmit(Receipt receipt)
    {
        if (!isEditMode)
        {
            receipt.Items ??= new List<ReceiptItem>();
            
            var response = await Http.PostAsJsonAsync(ApiUrl, receipt);
            if (response.IsSuccessStatusCode)
            {
                await LoadReceipts();
            }
            else
            {
                loadErrorMessage = $"Error creating receipt: {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine($"Error creating receipt: {response.ReasonPhrase} - {await response.Content.ReadAsStringAsync()}");
            }
        }
        showReceiptForm = false;
        StateHasChanged();
    }

    private void ViewReceipt(Receipt receiptToView)
    {
        // TODO: Mostrar detalles de recibos
        Console.WriteLine($"Viewing receipt: {receiptToView.ReceiptNumber}");
    }

    private void ProcessReceipt(Receipt receiptToProcess)
    {
        // TODO: Mostrar formulario de procesamiento de recibos
        Console.WriteLine($"Processing receipt: {receiptToProcess.ReceiptNumber}");
    }
} 