@page "/orders"
@using Pampazon.Web.Client.Models
@inject HttpClient Http

<h3>Orders</h3>

@if (!string.IsNullOrEmpty(loadErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        Error loading orders: @loadErrorMessage
    </div>
}

@if (orders == null && string.IsNullOrEmpty(loadErrorMessage))
{
    <p><em>Loading...</em></p>
}
else if (orders != null && !orders.Any())
{
    <p><em>No orders found. You can create a new order.</em></p>
    <button class="btn btn-success mt-3" @onclick="ShowCreateOrderForm">Create New Order</button>
}
else if (orders != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Order #</th>
                <th>Date</th>
                <th>Client CUIT</th>
                <th>Recipient</th>
                <th>Status</th>
                <th>Items</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.Date.ToShortDateString()</td>
                    <td>@(order.Client != null ? order.Client.BusinessName : order.ClientCUIT)</td>
                    <td>@order.RecipientName (@order.RecipientAddress)</td>
                    <td>@order.Status</td>
                    <td>@order.Items?.Count</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ViewOrder(order)">View</button>
                        @if (order.Status == "Pending")
                        {
                            <button class="btn btn-sm btn-warning" @onclick="() => PrepareOrder(order)">Prepare</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-success" @onclick="ShowCreateOrderForm">Create New Order</button>
}

@code {
    private List<Order>? orders;
    private string? loadErrorMessage;
    // TODO: CreateOrderForm component
    // TODO: PrepareOrderForm component (to change status and specify stock to pick from)
    // TODO: ViewOrderDetails component

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        loadErrorMessage = null;
        try
        {
            orders = await Http.GetFromJsonAsync<List<Order>>("api/Orders");
        }
        catch (HttpRequestException httpEx)
        {
            loadErrorMessage = $"HTTP Error: {httpEx.Message} (Status: {httpEx.StatusCode})";
            orders = new List<Order>();
        }
        catch (Exception ex)
        {
            loadErrorMessage = $"An error occurred: {ex.Message}";
            orders = new List<Order>();
            Console.WriteLine($"Error loading orders: {ex}");
        }
    }

    private void ShowCreateOrderForm()
    {
        // TODO: Adapt for new Order model
    }

    private void ViewOrder(Order orderToView)
    {
        // TODO: Adapt for new Order model
    }

    private void PrepareOrder(Order orderToPrepare)
    {
        // TODO: Adapt for new Order model
    }
} 