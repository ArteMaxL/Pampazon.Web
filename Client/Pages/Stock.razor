@page "/stock"
@using Pampazon.Web.Client.Models
@using Pampazon.Web.Client.Components // Agregado para el formulario
@inject HttpClient Http
@inject NavigationManager NavigationManager // Para navegación potencial después de acciones

<h3>Current Stock</h3>

@if (!string.IsNullOrEmpty(loadErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @loadErrorMessage
    </div>
}

@if (showStockPositionForm)
{
    <StockPositionForm StockPositionModel="currentStockPosition" IsEdit="isEditMode" OnSubmit="HandleStockPositionSubmit" OnCancel="CancelStockPositionForm" />
}
else
{
    if (stockPositions == null && string.IsNullOrEmpty(loadErrorMessage))
    {
        <p><em>Loading...</em></p>
    }
    else if (stockPositions != null && !stockPositions.Any())
    {
        <p><em>No stock positions found.</em></p>
    }
    else if (stockPositions != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Product ID</th>
                    <th>Product Desc.</th>
                    <th>Client ID</th>
                    <th>Receipt #</th>
                    <th>Qty</th>
                    <th>Position</th>
                    <th>Created At</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stockItem in stockPositions)
                {
                    <tr>
                        <td>@stockItem.Id</td>
                        <td>@stockItem.ProductId</td>
                        <td>@(stockItem.Product?.Description ?? "N/A")</td>
                        <td>@stockItem.ClientId</td>
                        <td>@stockItem.ReceiptNumber</td>
                        <td>@stockItem.Quantity</td>
                        <td>@stockItem.GetPositionCode()</td>
                        <td>@stockItem.CreatedAt.ToShortDateString()</td>
                        <td>
                            @* <button class="btn btn-sm btn-info" @onclick="() => ViewStockPositionDetails(stockItem)">View</button> *@
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDeleteStockPosition(stockItem.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <button class="btn btn-success mt-3" @onclick="ShowCreateStockPositionForm">Add New Stock Position</button>
}

@code {
    private List<StockPosition>? stockPositions;
    private string? loadErrorMessage;

    // For form handling
    private bool showStockPositionForm = false;
    private StockPosition currentStockPosition = new();
    private bool isEditMode = false;

    private const string ApiBaseUrl = "api/Stock"; // "api/stock"

    protected override async Task OnInitializedAsync()
    {
        await LoadStockPositions();
    }

    private async Task LoadStockPositions()
    {
        loadErrorMessage = null;
        try
        {
            stockPositions = await Http.GetFromJsonAsync<List<StockPosition>>(ApiBaseUrl);
        }
        catch (HttpRequestException httpEx)
        {
            loadErrorMessage = $"HTTP Error loading stock: {httpEx.Message} (Status: {httpEx.StatusCode})";
            stockPositions = new List<StockPosition>();
        }
        catch (Exception ex)
        {
            loadErrorMessage = $"An error occurred loading stock: {ex.Message}";
            stockPositions = new List<StockPosition>();
            Console.WriteLine($"Error loading stock positions: {ex}");
        }
        StateHasChanged();
    }

    private void ShowCreateStockPositionForm()
    {
        currentStockPosition = new StockPosition();
        // CreatedAt será establecido por el backend o en OnInitialized del formulario si es necesario antes de enviar
        isEditMode = false;
        showStockPositionForm = true;
    }

    private void CancelStockPositionForm()
    {
        showStockPositionForm = false;
        currentStockPosition = new();
    }

    private async Task HandleStockPositionSubmit(StockPosition stockPositionToSubmit)
    {
        if (!isEditMode)
        {
            var response = await Http.PostAsJsonAsync(ApiBaseUrl, stockPositionToSubmit);
            if (response.IsSuccessStatusCode)
            {
                await LoadStockPositions();
            }
            else
            {
                loadErrorMessage = $"Error creating stock position: {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine($"Error creating stock position: {response.ReasonPhrase} - {await response.Content.ReadAsStringAsync()}");
            }
        }
        showStockPositionForm = false;
        StateHasChanged();
    }

    private async Task ConfirmDeleteStockPosition(int stockPositionId)
    {
        // if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this stock position?"))
        // {
        try
        {
            var response = await Http.DeleteAsync($"{ApiBaseUrl}/{stockPositionId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadStockPositions();
            }
            else
            {
                loadErrorMessage = $"Error deleting stock position {stockPositionId}: {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine(loadErrorMessage);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            loadErrorMessage = $"Exception deleting stock position {stockPositionId}: {ex.Message}";
            Console.WriteLine(loadErrorMessage);
            StateHasChanged();
        }
    }

    // private void ViewStockPositionDetails(StockPosition stockPosition)
    // {
    //     Console.WriteLine($"Viewing stock position ID: {stockPosition.Id}");
    // }
} 